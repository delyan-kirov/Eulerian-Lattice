MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 46
# CSE_active_eliminated_expressions = 179
# CSE_active_total_size = 330
**VARIABLES**
DISCRETE M_FunctionND_00001_00002 #
{0..4}
DISCRETE M_FunctionND_00001_00003 #
{0..4}
DISCRETE M_FunctionND_00002_00003 #
{0..4}
DISCRETE J_FunctionND_00001_00002 #
{0..4}
**CONSTRAINTS**
w-inintervalset(J_FunctionND_00001_00002, [0,0,2,4])
**VARIABLES**
DISCRETE J_FunctionND_00001_00003 #
{0..4}
**CONSTRAINTS**
w-inintervalset(J_FunctionND_00001_00003, [0,0,2,4])
**VARIABLES**
DISCRETE J_FunctionND_00002_00003 #
{0..4}
**CONSTRAINTS**
w-inintervalset(J_FunctionND_00002_00003, [0,1,3,4])
**VARIABLES**
DISCRETE R_Function1D_00002 #
{1..3}
DISCRETE R_Function1D_00003 #
{1..3}
DISCRETE R_Function1D_00004 #
{2..4}
DISCRETE C_FunctionND_00002_00000 #
{0..1}
DISCRETE C_FunctionND_00002_00001 #
{0..1}
DISCRETE C_FunctionND_00003_00000 #
{0..1}
DISCRETE C_FunctionND_00003_00001 #
{0..1}
DISCRETE C_FunctionND_00003_00002 #
{0..1}
DISCRETE C_FunctionND_00004_00001 #
{0..1}
DISCRETE C_FunctionND_00004_00002 #
{0..1}
DISCRETE aux2 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, J_FunctionND_00001_00003, J_FunctionND_00002_00003, 3, 4], (1 + J_FunctionND_00001_00002))
{0..4}
DISCRETE aux5 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([0, M_FunctionND_00001_00002, 2, M_FunctionND_00002_00003, 2], (1 + M_FunctionND_00001_00003))
{0..4}
BOOL aux8 #Active-CSE: 2 occurrences of this expression or equivalent: ((1=(R_Function1D_00002%2)) /\ (J_FunctionND_00002_00003=3))
BOOL aux9 #Active-CSE: 2 occurrences of this expression or equivalent: ((0=(R_Function1D_00003%2)) /\ (J_FunctionND_00002_00003=3))
BOOL aux10 #Active-CSE: 2 occurrences of this expression or equivalent: ((0=(R_Function1D_00002%2)) /\ (J_FunctionND_00002_00003=3))
BOOL aux12 #Active-CSE: 2 occurrences of this expression or equivalent: ((1=(R_Function1D_00003%2)) /\ (J_FunctionND_00002_00003=3))
BOOL aux14 #Active-CSE: 2 occurrences of this expression or equivalent: ((1=(R_Function1D_00002%2)) /\ (2=J_FunctionND_00001_00002))
BOOL aux17 #Active-CSE: 2 occurrences of this expression or equivalent: ((0=(R_Function1D_00003%2)) /\ (3=J_FunctionND_00001_00003))
BOOL aux19 #Active-CSE: 2 occurrences of this expression or equivalent: ((1=(R_Function1D_00003%2)) /\ (3=J_FunctionND_00001_00003))
BOOL aux26 #Active-CSE: 2 occurrences of this expression or equivalent: ((1=(R_Function1D_00001%2)) /\ (3=J_FunctionND_00001_00003))
BOOL aux27 #Active-CSE: 2 occurrences of this expression or equivalent: ((1=(R_Function1D_00001%2)) /\ (2=J_FunctionND_00001_00002))
BOOL aux28 #Active-CSE: 2 occurrences of this expression or equivalent: ((0=(R_Function1D_00002%2)) /\ (2=J_FunctionND_00001_00002))
BOOL aux30 #Active-CSE: 18 occurrences of this expression or equivalent: (R_Function1D_00003%2)
DISCRETE aux31 #Active-CSE: 3 occurrences of this expression or equivalent: (R_Function1D_00002 + 1)
{2..4}
DISCRETE aux34 #Active-CSE: 7 occurrences of this expression or equivalent: (1 + J_FunctionND_00001_00003)
{1..5}
BOOL aux35 #Active-CSE: 18 occurrences of this expression or equivalent: (R_Function1D_00002%2)
BOOL aux36 #Active-CSE: 8 occurrences of this expression or equivalent: (R_Function1D_00004%2)
DISCRETE aux37 #Active-CSE: 7 occurrences of this expression or equivalent: (1 + M_FunctionND_00001_00003)
{1..5}
DISCRETE aux41 #Active-CSE: 7 occurrences of this expression or equivalent: (1 + J_FunctionND_00001_00002)
{1..5}
DISCRETE aux42 #Active-CSE: 7 occurrences of this expression or equivalent: (M_FunctionND_00002_00003 + 1)
{1..5}
DISCRETE aux44 #Active-CSE: 7 occurrences of this expression or equivalent: (J_FunctionND_00002_00003 + 1)
{1..5}
DISCRETE aux45 #Active-CSE: 7 occurrences of this expression or equivalent: (1 + M_FunctionND_00001_00002)
{1..5}
BOOL aux47 #(C_FunctionND_00002_00000=1)
BOOL aux49 #(2=J_FunctionND_00001_00002)
BOOL aux51 #((J_FunctionND_00002_00003 != 3) /\ (3 != J_FunctionND_00001_00003))
BOOL aux53 #((3=J_FunctionND_00001_00003) /\ ((J_FunctionND_00002_00003 != 3) \/ (2 != J_FunctionND_00001_00002)))
BOOL aux55 #(J_FunctionND_00002_00003=3)
BOOL aux57 #((2 != J_FunctionND_00001_00002) /\ (3 != J_FunctionND_00001_00003))
BOOL aux59 #(J_FunctionND_00002_00003 != 3)
BOOL aux60 #(C_FunctionND_00002_00000=1)
BOOL aux61 #(C_FunctionND_00002_00001=1)
BOOL aux62 #(C_FunctionND_00003_00000=1)
BOOL aux63 #(C_FunctionND_00003_00001=1)
BOOL aux64 #(C_FunctionND_00003_00002=1)
BOOL aux65 #(1=C_FunctionND_00004_00001)
BOOL aux66 #(1=C_FunctionND_00004_00002)
BOOL aux67 #((!aux35) /\ (J_FunctionND_00002_00003=3) /\ (2=J_FunctionND_00001_00002))
BOOL aux68 #(aux35 /\ (J_FunctionND_00002_00003=3) /\ (2=J_FunctionND_00001_00002))
**SEARCH**
PRINT[[M_FunctionND_00001_00002],[M_FunctionND_00001_00003],[M_FunctionND_00002_00003],[J_FunctionND_00001_00002],[J_FunctionND_00001_00003],[J_FunctionND_00002_00003],[R_Function1D_00002],[R_Function1D_00003],[R_Function1D_00004],[C_FunctionND_00002_00000],[C_FunctionND_00002_00001],[C_FunctionND_00003_00000],[C_FunctionND_00003_00001],[C_FunctionND_00003_00002],[C_FunctionND_00004_00001],[C_FunctionND_00004_00002]]
**CONSTRAINTS**
reify(diseq(2,J_FunctionND_00001_00002), aux47)
reify(w-literal(C_FunctionND_00002_00000,1), aux47)
reify(w-literal(C_FunctionND_00002_00001,1), aux49)
reify(w-literal(J_FunctionND_00001_00002,2), aux49)
reify(w-literal(C_FunctionND_00003_00000,1), aux51)
reify(watched-and({diseq(J_FunctionND_00002_00003,3),diseq(3,J_FunctionND_00001_00003)}), aux51)
reify(w-literal(C_FunctionND_00003_00001,1), aux53)
reify(watched-and({w-literal(J_FunctionND_00001_00003,3),watched-or({diseq(J_FunctionND_00002_00003,3),diseq(2,J_FunctionND_00001_00002)})}), aux53)
reify(w-literal(C_FunctionND_00003_00002,1), aux55)
reify(w-literal(J_FunctionND_00002_00003,3), aux55)
reify(w-literal(C_FunctionND_00004_00001,1), aux57)
reify(watched-and({diseq(2,J_FunctionND_00001_00002),diseq(3,J_FunctionND_00001_00003)}), aux57)
reify(w-literal(C_FunctionND_00004_00002,1), aux59)
reify(diseq(J_FunctionND_00002_00003,3), aux59)
reify(w-literal(C_FunctionND_00002_00000,1), aux60)
reify(w-literal(C_FunctionND_00002_00001,1), aux61)
reify(w-literal(C_FunctionND_00003_00000,1), aux62)
reify(w-literal(C_FunctionND_00003_00001,1), aux63)
reify(w-literal(C_FunctionND_00003_00002,1), aux64)
reify(w-literal(C_FunctionND_00004_00001,1), aux65)
reify(w-literal(C_FunctionND_00004_00002,1), aux66)
reify(watched-and({w-literal(aux35,0),w-literal(J_FunctionND_00002_00003,3),w-literal(J_FunctionND_00001_00002,2)}), aux67)
reify(watched-and({w-literal(aux35,1),w-literal(J_FunctionND_00002_00003,3),w-literal(J_FunctionND_00001_00002,2)}), aux68)
watchelement_one([2, J_FunctionND_00001_00002, 2, J_FunctionND_00002_00003, 4], aux34, aux2)
watchelement_one([1, 1, J_FunctionND_00001_00002, J_FunctionND_00001_00003, 4], aux44, aux2)
watchelement_one([3, J_FunctionND_00001_00003, J_FunctionND_00002_00003, 3, 4], aux41, aux2)
watchelement_one([0, 1, M_FunctionND_00001_00002, M_FunctionND_00001_00003, 1], aux42, aux5)
watchelement_one([0, M_FunctionND_00001_00003, M_FunctionND_00002_00003, 3, 3], aux45, aux5)
watchelement_one([0, M_FunctionND_00001_00002, 2, M_FunctionND_00002_00003, 2], aux37, aux5)
reify(watched-and({w-literal(aux35,1),w-literal(J_FunctionND_00002_00003,3)}), aux8)
reify(watched-and({w-literal(aux30,0),w-literal(J_FunctionND_00002_00003,3)}), aux9)
reify(watched-and({w-literal(aux35,0),w-literal(J_FunctionND_00002_00003,3)}), aux10)
reify(watched-and({w-literal(aux30,1),w-literal(J_FunctionND_00002_00003,3)}), aux12)
reify(watched-and({w-literal(aux35,1),w-literal(J_FunctionND_00001_00002,2)}), aux14)
reify(watched-and({w-literal(aux30,0),w-literal(J_FunctionND_00001_00003,3)}), aux17)
reify(watched-and({w-literal(aux30,1),w-literal(J_FunctionND_00001_00003,3)}), aux19)
reify(w-literal(J_FunctionND_00001_00003,3), aux26)
reify(w-literal(J_FunctionND_00001_00002,2), aux27)
reify(watched-and({w-literal(aux35,0),w-literal(J_FunctionND_00001_00002,2)}), aux28)
modulo(R_Function1D_00003,2,aux30)
modulo(R_Function1D_00002,2,aux35)
modulo(R_Function1D_00004,2,aux36)
reify(ineq(R_Function1D_00003, R_Function1D_00002, -1), 0)
watched-or({diseq(1,R_Function1D_00002),lexless([M_FunctionND_00001_00002, 2, M_FunctionND_00002_00003],[1, M_FunctionND_00001_00002, M_FunctionND_00001_00003])})
watched-or({diseq(R_Function1D_00002,R_Function1D_00003),lexless([M_FunctionND_00001_00003, M_FunctionND_00002_00003, 3],[M_FunctionND_00001_00002, 2, M_FunctionND_00002_00003])})
watchelement_one([0, 0, 0, 0, 0], aux45, 0)
watchelement_one([0, 0, 0, 0, 0], aux37, 0)
watchelement_one([0, 0, 0, 0, 0], aux42, 0)
watchelement_one([0, 1, M_FunctionND_00001_00002, M_FunctionND_00001_00003, 1], aux45, M_FunctionND_00001_00002)
watchelement_one([0, 1, M_FunctionND_00001_00002, M_FunctionND_00001_00003, 1], aux37, M_FunctionND_00001_00003)
watchelement_one([0, M_FunctionND_00001_00002, 2, M_FunctionND_00002_00003, 2], aux45, M_FunctionND_00001_00002)
watchelement_one([0, 1, 2, 3, 4], aux45, M_FunctionND_00001_00002)
watchelement_one([0, M_FunctionND_00001_00003, M_FunctionND_00002_00003, 3, 3], aux37, M_FunctionND_00001_00003)
watchelement_one([0, 1, 2, 3, 4], aux37, M_FunctionND_00001_00003)
watchelement_one([0, M_FunctionND_00001_00002, 2, M_FunctionND_00002_00003, 2], aux42, M_FunctionND_00002_00003)
watchelement_one([0, M_FunctionND_00001_00003, M_FunctionND_00002_00003, 3, 3], aux42, M_FunctionND_00002_00003)
watchelement_one([0, 1, 2, 3, 4], aux42, M_FunctionND_00002_00003)
watchelement_one([0, 1, 2, 3, 4], aux41, J_FunctionND_00001_00002)
watchelement_one([0, 1, 2, 3, 4], aux34, J_FunctionND_00001_00003)
watchelement_one([0, 1, 2, 3, 4], aux44, J_FunctionND_00002_00003)
watchelement_one([1, 1, J_FunctionND_00001_00002, J_FunctionND_00001_00003, 4], aux41, J_FunctionND_00001_00002)
watchelement_one([1, 1, J_FunctionND_00001_00002, J_FunctionND_00001_00003, 4], aux34, J_FunctionND_00001_00003)
watchelement_one([2, J_FunctionND_00001_00002, 2, J_FunctionND_00002_00003, 4], aux41, J_FunctionND_00001_00002)
watchelement_one([4, 4, 4, 4, 4], aux41, 4)
watchelement_one([3, J_FunctionND_00001_00003, J_FunctionND_00002_00003, 3, 4], aux34, J_FunctionND_00001_00003)
watchelement_one([4, 4, 4, 4, 4], aux34, 4)
watchelement_one([2, J_FunctionND_00001_00002, 2, J_FunctionND_00002_00003, 4], aux44, J_FunctionND_00002_00003)
watchelement_one([3, J_FunctionND_00001_00003, J_FunctionND_00002_00003, 3, 4], aux44, J_FunctionND_00002_00003)
watchelement_one([4, 4, 4, 4, 4], aux44, 4)
watchelement_one([0, 1, M_FunctionND_00001_00002, M_FunctionND_00001_00003, 1], aux41, 1)
watchelement_one([0, 1, M_FunctionND_00001_00002, M_FunctionND_00001_00003, 1], aux34, 1)
watchelement_one([0, M_FunctionND_00001_00002, 2, M_FunctionND_00002_00003, 2], aux41, 2)
watchelement_one([0, M_FunctionND_00001_00002, 2, M_FunctionND_00002_00003, 2], aux44, 2)
watchelement_one([0, M_FunctionND_00001_00003, M_FunctionND_00002_00003, 3, 3], aux34, 3)
watchelement_one([0, M_FunctionND_00001_00003, M_FunctionND_00002_00003, 3, 3], aux44, 3)
watchelement_one([1, 1, J_FunctionND_00001_00002, J_FunctionND_00001_00003, 4], aux45, 1)
watchelement_one([1, 1, J_FunctionND_00001_00002, J_FunctionND_00001_00003, 4], aux37, 1)
watchelement_one([2, J_FunctionND_00001_00002, 2, J_FunctionND_00002_00003, 4], aux45, 2)
watchelement_one([2, J_FunctionND_00001_00002, 2, J_FunctionND_00002_00003, 4], aux42, 2)
watchelement_one([3, J_FunctionND_00001_00003, J_FunctionND_00002_00003, 3, 4], aux37, 3)
watchelement_one([3, J_FunctionND_00001_00003, J_FunctionND_00002_00003, 3, 4], aux42, 3)
ineq(R_Function1D_00002, R_Function1D_00004, 0)
ineq(R_Function1D_00003, R_Function1D_00004, 0)
watched-or({diseq(2,J_FunctionND_00001_00002),ineq(1, R_Function1D_00002, -1)})
watched-or({diseq(3,J_FunctionND_00001_00003),ineq(1, R_Function1D_00003, -1)})
watched-or({diseq(J_FunctionND_00002_00003,3),ineq(R_Function1D_00002, R_Function1D_00003, -1)})
ineq(R_Function1D_00002, R_Function1D_00004, -1)
ineq(R_Function1D_00003, R_Function1D_00004, -1)
reifyimply(w-literal(R_Function1D_00002,1), aux60)
reifyimply(w-literal(R_Function1D_00002,2), aux61)
reifyimply(w-literal(R_Function1D_00003,1), aux62)
reifyimply(w-literal(R_Function1D_00003,2), aux63)
reifyimply(gaceq(aux31,R_Function1D_00003), aux64)
reifyimply(w-literal(R_Function1D_00004,2), aux65)
reifyimply(gaceq(aux31,R_Function1D_00004), aux66)
watched-or({watched-and({weightedsumleq([-1,-1,1],[aux14,aux27,aux28],0),weightedsumgeq([-1,-1,1],[aux14,aux27,aux28],0)}),diseq(2,J_FunctionND_00001_00002)})
watched-or({watched-and({weightedsumleq([1,-1,-1,1,-1],[aux17,aux19,aux26,aux67,aux68],0),weightedsumgeq([1,-1,-1,1,-1],[aux17,aux19,aux26,aux67,aux68],0)}),diseq(3,J_FunctionND_00001_00003)})
watched-or({diseq(J_FunctionND_00002_00003,3),watched-and({weightedsumleq([-1,1,1,-1],[aux8,aux9,aux10,aux12],0),weightedsumgeq([-1,1,1,-1],[aux8,aux9,aux10,aux12],0)})})
sumleq([R_Function1D_00002,1],aux31)
sumgeq([R_Function1D_00002,1],aux31)
sumleq([R_Function1D_00003,1],R_Function1D_00004)
sumgeq([R_Function1D_00003,1],R_Function1D_00004)
sumleq([1,J_FunctionND_00001_00003],aux34)
sumgeq([1,J_FunctionND_00001_00003],aux34)
sumleq([1,M_FunctionND_00001_00003],aux37)
sumgeq([1,M_FunctionND_00001_00003],aux37)
sumleq([1,J_FunctionND_00001_00002],aux41)
sumgeq([1,J_FunctionND_00001_00002],aux41)
sumleq([M_FunctionND_00002_00003,1],aux42)
sumgeq([M_FunctionND_00002_00003,1],aux42)
sumleq([J_FunctionND_00002_00003,1],aux44)
sumgeq([J_FunctionND_00002_00003,1],aux44)
sumleq([1,M_FunctionND_00001_00002],aux45)
sumgeq([1,M_FunctionND_00001_00002],aux45)
weightedsumleq([-1,-1,1],[aux27,aux35,!aux35],-1)
weightedsumgeq([-1,-1,1],[aux27,aux35,!aux35],-1)
weightedsumleq([-1,1,-1,-1,1],[aux8,aux10,aux26,aux30,!aux30],-1)
weightedsumgeq([-1,1,-1,-1,1],[aux8,aux10,aux26,aux30,!aux30],-1)
weightedsumleq([-1,-1,-1,1,1,1],[aux30,aux35,aux36,!aux30,!aux35,!aux36],0)
weightedsumgeq([-1,-1,-1,1,1,1],[aux30,aux35,aux36,!aux30,!aux35,!aux36],0)
weightedsumleq([-1,1,-1,1,-1,1],[aux14,aux17,aux19,aux28,aux36,!aux36],1)
weightedsumgeq([-1,1,-1,1,-1,1],[aux14,aux17,aux19,aux28,aux36,!aux36],1)
weightedsumleq([1,-1,-1,-1,1,1],[aux9,aux12,aux35,aux36,!aux35,!aux36],0)
weightedsumgeq([1,-1,-1,-1,1,1],[aux9,aux12,aux35,aux36,!aux35,!aux36],0)
weightedsumleq([-1,-1,1,1],[aux30,aux36,!aux30,!aux36],0)
weightedsumgeq([-1,-1,1,1],[aux30,aux36,!aux30,!aux36],0)
**EOF**
