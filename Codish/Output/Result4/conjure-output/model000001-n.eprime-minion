MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 16
# CSE_active_eliminated_expressions = 60
# CSE_active_total_size = 96
**VARIABLES**
DISCRETE M_FunctionND_00001_00002 #
{0..3}
DISCRETE J_FunctionND_00001_00002 #
{0..3}
**CONSTRAINTS**
w-inintervalset(J_FunctionND_00001_00002, [0,0,2,3])
**VARIABLES**
DISCRETE R_Function1D_00002 #
{1..2}
DISCRETE R_Function1D_00003 #
{2..3}
DISCRETE C_FunctionND_00002_00000 #
{0..1}
DISCRETE C_FunctionND_00002_00001 #
{0..1}
DISCRETE C_FunctionND_00003_00001 #
{0..1}
BOOL aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ((1=(R_Function1D_00002%2)) /\ (2=J_FunctionND_00001_00002))
BOOL aux6 #Active-CSE: 2 occurrences of this expression or equivalent: ((1=(R_Function1D_00001%2)) /\ (2=J_FunctionND_00001_00002))
BOOL aux7 #Active-CSE: 2 occurrences of this expression or equivalent: ((0=(R_Function1D_00002%2)) /\ (2=J_FunctionND_00001_00002))
DISCRETE aux8 #Active-CSE: 6 occurrences of this expression or equivalent: (1 + M_FunctionND_00001_00002)
{1..4}
BOOL aux9 #Active-CSE: 10 occurrences of this expression or equivalent: (R_Function1D_00002%2)
DISCRETE aux11 #Active-CSE: 6 occurrences of this expression or equivalent: (1 + J_FunctionND_00001_00002)
{1..4}
BOOL aux12 #Active-CSE: 6 occurrences of this expression or equivalent: (R_Function1D_00003%2)
BOOL aux17 #(C_FunctionND_00002_00000=1)
BOOL aux19 #(C_FunctionND_00002_00001=1)
BOOL aux21 #(2 != J_FunctionND_00001_00002)
BOOL aux22 #(C_FunctionND_00002_00000=1)
BOOL aux23 #(C_FunctionND_00002_00001=1)
BOOL aux24 #(C_FunctionND_00003_00001=1)
**SEARCH**
PRINT[[M_FunctionND_00001_00002],[J_FunctionND_00001_00002],[R_Function1D_00002],[R_Function1D_00003],[C_FunctionND_00002_00000],[C_FunctionND_00002_00001],[C_FunctionND_00003_00001]]
**CONSTRAINTS**
reify(diseq(2,J_FunctionND_00001_00002), aux17)
reify(w-literal(C_FunctionND_00002_00000,1), aux17)
reify(w-literal(J_FunctionND_00001_00002,2), aux19)
reify(w-literal(C_FunctionND_00002_00001,1), aux19)
reify(w-literal(C_FunctionND_00003_00001,1), aux21)
reify(diseq(2,J_FunctionND_00001_00002), aux21)
reify(w-literal(C_FunctionND_00002_00000,1), aux22)
reify(w-literal(C_FunctionND_00002_00001,1), aux23)
reify(w-literal(C_FunctionND_00003_00001,1), aux24)
reify(watched-and({w-literal(aux9,1),w-literal(J_FunctionND_00001_00002,2)}), aux0)
reify(w-literal(J_FunctionND_00001_00002,2), aux6)
reify(watched-and({w-literal(aux9,0),w-literal(J_FunctionND_00001_00002,2)}), aux7)
modulo(R_Function1D_00002,2,aux9)
modulo(R_Function1D_00003,2,aux12)
watched-or({diseq(1,R_Function1D_00002),lexless([M_FunctionND_00001_00002, 2],[1, M_FunctionND_00001_00002])})
watchelement_one([0, 0, 0, 0], aux8, 0)
watchelement_one([0, 1, M_FunctionND_00001_00002, 1], aux8, M_FunctionND_00001_00002)
watchelement_one([0, M_FunctionND_00001_00002, 2, 2], aux8, M_FunctionND_00001_00002)
watchelement_one([0, 1, 2, 3], aux8, M_FunctionND_00001_00002)
watchelement_one([0, 1, 2, 3], aux11, J_FunctionND_00001_00002)
watchelement_one([1, 1, J_FunctionND_00001_00002, 3], aux11, J_FunctionND_00001_00002)
watchelement_one([2, J_FunctionND_00001_00002, 2, 3], aux11, J_FunctionND_00001_00002)
watchelement_one([3, 3, 3, 3], aux11, 3)
watchelement_one([0, 1, M_FunctionND_00001_00002, 1], aux11, 1)
watchelement_one([0, M_FunctionND_00001_00002, 2, 2], aux11, 2)
watchelement_one([1, 1, J_FunctionND_00001_00002, 3], aux8, 1)
watchelement_one([2, J_FunctionND_00001_00002, 2, 3], aux8, 2)
watched-or({diseq(2,J_FunctionND_00001_00002),ineq(1, R_Function1D_00002, -1)})
ineq(R_Function1D_00002, R_Function1D_00003, -1)
reifyimply(w-literal(R_Function1D_00002,1), aux22)
reifyimply(w-literal(R_Function1D_00002,2), aux23)
reifyimply(w-literal(R_Function1D_00003,2), aux24)
watched-or({diseq(2,J_FunctionND_00001_00002),watched-and({weightedsumleq([-1,-1,1],[aux0,aux6,aux7],0),weightedsumgeq([-1,-1,1],[aux0,aux6,aux7],0)})})
sumleq([1,M_FunctionND_00001_00002],aux8)
sumgeq([1,M_FunctionND_00001_00002],aux8)
sumleq([1,J_FunctionND_00001_00002],aux11)
sumgeq([1,J_FunctionND_00001_00002],aux11)
sumleq([R_Function1D_00002,1],R_Function1D_00003)
sumgeq([R_Function1D_00002,1],R_Function1D_00003)
weightedsumleq([-1,-1,1],[aux6,aux9,!aux9],-1)
weightedsumgeq([-1,-1,1],[aux6,aux9,!aux9],-1)
weightedsumleq([-1,-1,1,1],[aux9,aux12,!aux9,!aux12],0)
weightedsumgeq([-1,-1,1,1],[aux9,aux12,!aux9,!aux12],0)
weightedsumleq([-1,1,-1,1],[aux0,aux7,aux12,!aux12],1)
weightedsumgeq([-1,1,-1,1],[aux0,aux7,aux12,!aux12],1)
**EOF**
